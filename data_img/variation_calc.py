import pandas as pd 

def calculate_variation(df, timeframe, selected_stocks):
    # Ensure necessary columns exist
    required_columns = {'Date', 'Ticker', 'Close'}
    if not required_columns.issubset(df.columns):
        raise KeyError(f"Missing one or more required columns: {required_columns - set(df.columns)}")
    
    # Ensure 'Date' is datetime
    df['Date'] = pd.to_datetime(df['Date'])
    
    # Filter the DataFrame for the selected stocks
    df_filtered = df[df['Ticker'].isin(selected_stocks)]
    
    # Resample rule mapping
    resample_rule = {'monthly': 'ME', 'quarterly': 'Q', 'ytd': 'A'}
    if timeframe not in resample_rule:
        raise ValueError("Invalid timeframe. Choose from 'monthly', 'quarterly', or 'ytd'.")
    
    # Resample for the selected timeframe
    resampled = pd.DataFrame()
    for ticker in selected_stocks:
        # Filter data by ticker
        ticker_data = df_filtered[df_filtered['Ticker'] == ticker]
        
        # Resample the data for the ticker
        resampled_ticker = ticker_data.set_index('Date').resample(resample_rule[timeframe])['Close'].last()
        
        # Add to the result and rename the column to the ticker name
        resampled_ticker.name = ticker
        resampled = pd.concat([resampled, resampled_ticker], axis=1)
    
    # Debugging: Check if 'Close' columns are now present
    print(f"Resampled data:\n{resampled.head()}")
    
    # Calculate percentage change for each stock separately
    for ticker in selected_stocks:
        resampled[f'{ticker} Change (%)'] = resampled[ticker].pct_change() * 100
    
    # Drop NaN values generated by pct_change() (since the first row will have no previous value)
    resampled = resampled.dropna(subset=[f'{ticker} Change (%)' for ticker in selected_stocks])
    
    # Reset index to have 'Ticker' and 'Date' as columns
    resampled = resampled.reset_index()
    resampled.rename(columns={'index':'Date'}, inplace=True)
    resample_final= resampled.drop(columns=selected_stocks)
    
    return resample_final



